a=b=c=d=10

#print(a,b,c,d)
a=[3,4,6,7]

ox=[3,3,3,3,3,4,4,6,7,7,7,6,6]
#print(ox.count(a))

"""for a in ox:
    if ox.count(a)>2:
        print(a)
        #break"""

"""def multiplicity_check(a):
    flag=0
    #print(a)
    for x in a:
        #print(x)
        #print(a.count(x))
        if a.count(x)>2:
            flag+=1
    print(flag)
            
            
        

multiplicity_check([1,11, 11,7])
"""

a=[1,2,3,4,5]
b=[3,2,4,5,]
c=[]

"""
[11, 11, 5, 3, 5, 3], [11, 11, 5, 3, 5, 7], [11, 11, 5, 3, 7, 3], [11, 11, 5, 3, 7, 5], [11, 11, 5, 3, 7, 7], 
[11, 11, 5, 5, 3, 3], [11, 11, 5, 5, 3, 7], [11, 11, 5, 5, 7, 3], [11, 11, 5, 5, 7, 7]

"""
def check_diff(a,b):
    flag=0
    for i in range(1,5):
        print(f"i={i}")
        sample_set={a[i],b[i]}
        print(sample_set)
        
        if len(sample_set)==2:
            flag+=1
            continue
        else:
            break
        
    if flag==4:
        return True
    else:
        return False
    
def check_diff(a,b,c):
    flag=0
    for i in range(1,5):
        sample_set={a[i],b[i],c[i]}
        if len(sample_set)==3:
            flag+=1
            continue
        else:
            break
    if flag==4:
        return True
    else:
        return False

def check_diff4(a,b,c,d):
    flag=0
    for i in range(1,5):
        sample_set={a[i],b[i],c[i],d[i]}
        if len(sample_set)==4:
            flag+=1
            continue
        else:
            break
    if flag==4:
        return True
    else:
        return False

    
a=[11, 11, 5, 3, 5, 3]
b=[11, 1, 65, 13, 25, 7]
c=[11, 1111, 15, 23, 115, 3]
d=[11, 1111, 215, 2113, 1135, 3]
"""
print(check_diff4(a,b,c,d))
if check_diff4(a,b,c,d)==False:
    print("not a match")
else:
    print("its a match")"""

print(f"youfds\tsafd \n fjsdfad")

"""lo=[]
lo.append([a,b,c,d])
#print(lo)   
lo.append([1,2])
print(lo)
print(lo[1][0])
"""
"""
list12=[[1, 1, 2, 2], [1, 1, 2, 3], [1, 1, 2, 4], [1, 1, 3, 2], [1, 1, 3, 3], [1, 1, 3, 4], [1, 1, 4, 2], [1, 1, 4, 3], [1, 1, 4, 4], 
        [1, 2, 1, 2], [1, 2, 1, 3], [1, 2, 1, 4], [1, 2, 2, 1], [1, 2, 2, 3], [1, 2, 2, 4], [1, 2, 3, 1], [1, 2, 3, 2], [1, 2, 3, 3], 
        [1, 2, 3, 4], [1, 2, 4, 1], [1, 2, 4, 2], [1, 2, 4, 3], [1, 2, 4, 4], [1, 3, 1, 2], [1, 3, 1, 3], [1, 3, 1, 4], [1, 3, 2, 1], 
        [1, 3, 2, 2], [1, 3, 2, 3], [1, 3, 2, 4], [1, 3, 3, 1], [1, 3, 3, 2], [1, 3, 3, 4], [1, 3, 4, 1], [1, 3, 4, 2], [1, 3, 4, 3], 
        [1, 3, 4, 4], [1, 4, 1, 2], [1, 4, 1, 3], [1, 4, 1, 4], [1, 4, 2, 1], [1, 4, 2, 2], [1, 4, 2, 3], [1, 4, 2, 4], [1, 4, 3, 1], 
        [1, 4, 3, 2], [1, 4, 3, 3], [1, 4, 3, 4], [1, 4, 4, 1], [1, 4, 4, 2], [1, 4, 4, 3], [2, 1, 1, 2], [2, 1, 1, 3], [2, 1, 1, 4], 
        [2, 1, 2, 1], [2, 1, 2, 3], [2, 1, 2, 4], [2, 1, 3, 1], [2, 1, 3, 2], [2, 1, 3, 3], [2, 1, 3, 4], [2, 1, 4, 1], [2, 1, 4, 2], 
        [2, 1, 4, 3], [2, 1, 4, 4], [2, 2, 1, 1], [2, 2, 1, 3], [2, 2, 1, 4], [2, 2, 3, 1], [2, 2, 3, 3], [2, 2, 3, 4], [2, 2, 4, 1], 
        [2, 2, 4, 3], [2, 2, 4, 4], [2, 3, 1, 1], [2, 3, 1, 2], [2, 3, 1, 3], [2, 3, 1, 4], [2, 3, 2, 1], [2, 3, 2, 3], [2, 3, 2, 4], 
        [2, 3, 3, 1], [2, 3, 3, 2], [2, 3, 3, 4], [2, 3, 4, 1], [2, 3, 4, 2], [2, 3, 4, 3], [2, 3, 4, 4], [2, 4, 1, 1], [2, 4, 1, 2], 
        [2, 4, 1, 3], [2, 4, 1, 4], [2, 4, 2, 1], [2, 4, 2, 3], [2, 4, 2, 4], [2, 4, 3, 1], [2, 4, 3, 2], [2, 4, 3, 3], [2, 4, 3, 4], 
        [2, 4, 4, 1], [2, 4, 4, 2], [2, 4, 4, 3], [3, 1, 1, 2], [3, 1, 1, 3], [3, 1, 1, 4], [3, 1, 2, 1], [3, 1, 2, 2], [3, 1, 2, 3], 
        [3, 1, 2, 4], [3, 1, 3, 1], [3, 1, 3, 2], [3, 1, 3, 4], [3, 1, 4, 1], [3, 1, 4, 2], [3, 1, 4, 3], [3, 1, 4, 4], [3, 2, 1, 1], 
        [3, 2, 1, 2], [3, 2, 1, 3], [3, 2, 1, 4], [3, 2, 2, 1], [3, 2, 2, 3], [3, 2, 2, 4], [3, 2, 3, 1], [3, 2, 3, 2], [3, 2, 3, 4], 
        [3, 2, 4, 1], [3, 2, 4, 2], [3, 2, 4, 3], [3, 2, 4, 4], [3, 3, 1, 1], [3, 3, 1, 2], [3, 3, 1, 4], [3, 3, 2, 1], [3, 3, 2, 2], 
        [3, 3, 2, 4], [3, 3, 4, 1], [3, 3, 4, 2], [3, 3, 4, 4], [3, 4, 1, 1], [3, 4, 1, 2], [3, 4, 1, 3], [3, 4, 1, 4], [3, 4, 2, 1], 
        [3, 4, 2, 2], [3, 4, 2, 3], [3, 4, 2, 4], [3, 4, 3, 1], [3, 4, 3, 2], [3, 4, 3, 4], [3, 4, 4, 1], [3, 4, 4, 2], [3, 4, 4, 3], 
        [4, 1, 1, 2], [4, 1, 1, 3], [4, 1, 1, 4], [4, 1, 2, 1], [4, 1, 2, 2], [4, 1, 2, 3], [4, 1, 2, 4], [4, 1, 3, 1], [4, 1, 3, 2], 
        [4, 1, 3, 3], [4, 1, 3, 4], [4, 1, 4, 1], [4, 1, 4, 2], [4, 1, 4, 3], [4, 2, 1, 1], [4, 2, 1, 2], [4, 2, 1, 3], [4, 2, 1, 4], 
        [4, 2, 2, 1], [4, 2, 2, 3], [4, 2, 2, 4], [4, 2, 3, 1], [4, 2, 3, 2], [4, 2, 3, 3], [4, 2, 3, 4], [4, 2, 4, 1], [4, 2, 4, 2], 
        [4, 2, 4, 3], [4, 3, 1, 1], [4, 3, 1, 2], [4, 3, 1, 3], [4, 3, 1, 4], [4, 3, 2, 1], [4, 3, 2, 2], [4, 3, 2, 3], [4, 3, 2, 4], 
        [4, 3, 3, 1], [4, 3, 3, 2], [4, 3, 3, 4], [4, 3, 4, 1], [4, 3, 4, 2], [4, 3, 4, 3], [4, 4, 1, 1], [4, 4, 1, 2], [4, 4, 1, 3], 
        [4, 4, 2, 1], [4, 4, 2, 2], [4, 4, 2, 3], [4, 4, 3, 1], [4, 4, 3, 2], [4, 4, 3, 3]]

block1=[]
block2=[]
block3=[]
block4=[]
flag1=flag2=flag3=flag4=0
#print(len(list12))
for a in list12:
    print(a)
    print(a[0])
    if a[0]==1:
        block1.append(a)
        flag1+=1
    elif a[0]==2:
        block2.append(a)
        flag2+=1
    elif a[0]==3:
        block3.append(a)
        flag3+=1
    else:
        block4.append(a)
        flag4+=1

print(f"flag1={flag1}\t flag2={flag2} \t flag3={flag3} \t flag4={flag4}")
print(len(block1))
print(block1)"""

import time
"""
for i in range(101):
    print(f"Progress: {i}%", end="\r")
    time.sleep(0.1)
print("\nDone!")

int(.6"""
"""
import time

def time_diff(a):
    end_time = time.time()
    diff = (end_time - a) / 60
    return diff

start_time = time.time()
possible_solution = []  # Assuming you have this list or variable in your code

while True:
    possible_solution.append([1, 2, 3, 4])  # Just an example to append to the list
    time_di = time_diff(start_time)
    
    # Print the output without checking for whole numbers
    if time_di == int(time_di):
        print(f"Time taken: {time_di:.2f} minutes\tPossible solutions: {len(possible_solution)}", end="\r")
    
    #time.sleep(1)  # Add a small delay to avoid excessive CPU usage

"""
yo=[[1, 4, 4, 3], [2, 3, 3, 2], [3, 1, 2, 1], [4, 2, 1, 4]]
"""
yo=[[[1, 4, 4, 3], [2, 3, 3, 2], [3, 2, 1, 1], [4, 1, 2, 4]],
[[1, 4, 4, 3], [2, 3, 3, 2], [3, 2, 1, 4], [4, 1, 2, 1]],
[[1, 4, 4, 3], [2, 3, 3, 2], [3, 2, 2, 1], [4, 1, 1, 4]],
[[1, 4, 4, 3], [2, 3, 3, 4], [3, 1, 1, 2], [4, 2, 2, 1]],
[[1, 4, 4, 3], [2, 3, 3, 4], [3, 1, 2, 1], [4, 2, 1, 2]],
[[1, 4, 4, 3], [2, 3, 3, 4], [3, 1, 2, 2], [4, 2, 1, 1]],
[[1, 4, 4, 3], [2, 3, 3, 4], [3, 2, 1, 1], [4, 1, 2, 2]],
[[1, 4, 4, 3], [2, 3, 3, 4], [3, 2, 1, 2], [4, 1, 2, 1]],
[[1, 4, 4, 3], [2, 3, 3, 4], [3, 2, 2, 1], [4, 1, 1, 2]]]

"""
"""
for x in yo:
    print(x)
    
    x.insert(0,'a')
    x.append('y')
    #print(x)


print(yo)

"""
"""
yo=[[1, 1, 2, 2, 3, 3], [2, 2, 1, 1, 4, 3], [3, 3, 4, 6, 1, 4], [6, 4, 3, 5, 2, 1]]

a,b,c,d=yo
print(a)
"""
print("This is a bell alert\a")